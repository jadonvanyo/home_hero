Command line:
python3 -m venv venv
    -This will set up a virtual environment
source venv/bin/activate
    -This will activate the virtual environment

scrapy startproject (insert name of project here)
    -This will set up the scrapy project
    -Ex: scrapy startproject bookscraper

scrapy genspider [name of spider] (url to be scraped)
    -This will create a spider to crawl a website
    -Perform this in the spiders folder
    -Ex: scrapy genspider bookspider books.toscrape.com

pip3 install ipython
    -This will install a different shell that is easier to read

scrapy view [url]
    -Opens a page the way a spider will see it
        -Good option to examine if a spider is running into catchas

scrapy shell [url]
    -Opens scrapy in the new shell
    -Additional option to fetch a url immediately

scrapy crawl (spider name)
    -This will push the spider to crawl a website to collect the target information
    -Note: If the FEEDS is created in settings, it will automatically save to that feed format
    -Ex: scrapy crawl bookspider

scrapy crawl (spider name) -O (name of csv or json file)
    -This will allow your crawl to return a csv file with all of the information gathered
    -The '-o' will append to a file, and '-O' will overwrite to a file
    -Ex: scrapy crawl bookspider -O bookdata.csv
    -Ex: scrapy crawl bookspider -o bookdata.json

/usr/local/mysql/bin/mysql -u root -p
    -This command will set up the SQL database for a given project
    -SQL needs to have been downloaded, installed, and running
    -After this, you will be prompted for a password that you used when setting up SQL

export PATH=${PATH}:/usr/local/mysql/bin/
    -This command will append the path to MySQL to your environment variables
    -Follow this command with the mysql -u root -p command

mysql -u root -p
    -This command will log you in as the root user and prompt you to enter the password used when setting up the database
    -Enter that and you can get into the database


SQL Commands:
SHOW databases;
    -This will show all of the databases saved in SQL

USE (name of database);
    -This will direct into a particular database
    -This will allow you to use normal SQL commands (SELECT, INSERT, ect.)
    -Ex: use books;

DROP TABLE (table name);
    -This will completely delete a table


In scrapy shell:
fetch('(enter url you want to look through here)')
    -This will get the HTML from the URL entered and enter it into the response variable

response.css('css selector here').get()
    -This will get the information stored in a particular css selector
    -Ex: response.css('.product_main h1::text').get()

response.xpath("(enter the xpath here)").get()
    -This will get the information from a xpath that cannot be easily access using css
    -Use for when there is no class name or id on a particular HTML tag (just <p>, or <a>, or <h2>, ect.)
    -Ex: response.xpath("//ul[@class='breadcrumb']/li[@class='active']/preceding-sibling::li[1]/a/text()").get()

Notes:
Yield is like return but the data is not saved in the memory

TypeError: 'NoneType' object is not subscriptable.
    -This error occurs when the spider does not match all the items in the class for items in item.py


URL: response.url
Address: response.css('div.styles__AddressWrapper-sc-13x5vko-0.bCvhGr h1::text').getall()
    Note: Returns a list of 3 items that contain the address, fix in pipelines
Price: response.css('span[data-testid="price"] span::text').get()
Beds: response.xpath('//ul/li/span[contains(text(), "Bedrooms")]/text()[3]').get()
Baths: response.xpath('//ul/li/span[contains(text(), "Bathrooms")]/text()[3]').get()
SQFT: response.xpath('//ul/li/span[contains(text(), "Total interior livable area")]/text()[3]').get()
Taxes: response.xpath('//table[contains(@id, "taxes")]/tbody/tr[0]/td[2]/text()').get()
    Note: Use https://www.countyoffice.org/
Insurance: Calculate this using the general rule of thumb: 0.5% to 1% of the property's value for yearly insurance then divide that by 12
Rent: REQUIRES A DIFFERENT SPIDER
    Note: Use https://www.zillow.com/rental-manager/price-my-rental/
Description: response.xpath('//div[contains(@class, "Text-c11n-8-84-3__sc-aiai24-0")]/text()').get()
Year Built: response.xpath('//ul/li/span[contains(text(), "Year built")]/text()[3]').get()
Property Subtype: response.xpath('//ul/li/span[contains(text(), "Property subType")]/text()[3]').get()
Days on Market: ???
Region: response.xpath('//ul/li/span[contains(text(), "Region")]/text()[3]').get()
Subdivision: response.xpath('//ul/li/span[contains(text(), "Subdivision")]/text()[3]').get()

house_links = response.xpath('//a[contains(@data-test, "property-card-link")]/@href').getall()

